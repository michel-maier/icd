<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}We Movies{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .card-custom {
            background-color: #f7f7f7;
        }
        .stars .blue-star {
            color: #007bff;
        }
        .stars .grey-star {
            color: #b0b0b0;
        }
        fieldset {
            border: 2px solid #b0b0b0;
            padding: 10px;
        }
        .cursor-pointer {
            cursor: pointer;
        }
    </style>
</head>
<body>
{% block body %}{% endblock %}
<script>
    /**
     * Modal behaviour
     */
    document.addEventListener('DOMContentLoaded', function() {
        const myModal = document.getElementById('myModal');

        // Écoute l'événement d'ouverture du modal
        myModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget; // Bouton qui a déclenché l'ouverture
            const url = button.getAttribute('data-url'); // Récupère l'URL du contenu à charger

            // Vérifie que l'URL existe avant de charger
            if (url) {
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Erreur de chargement');
                        }
                        return response.text();
                    })
                    .then(data => {
                        myModal.querySelector('.modal-body').innerHTML = data;
                    })
                    .catch(error => {
                        myModal.querySelector('.modal-body').innerHTML = '<p>Erreur de chargement du contenu.</p>';
                        console.error(error);
                    });
            }
        });
    });
    /**
     * Autocomplete behaviour
     */
    const form = document.querySelector('form[data-url]');
    const input = document.getElementById('movieSearchInput');
    const resultsContainer = document.getElementById('autocompleteResults');
    let debounceTimeout;

    // Fonction de debounce pour retarder l'appel de la recherche
    function debounceSearch(query) {
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(() => {
            fetchResults(query);
        }, 300); // Délai de 300ms
    }

    // Fonction pour faire la requête et afficher les résultats
    function fetchResults(query) {
        if (query.length < 2) { // Ne lance pas la recherche si le terme est trop court
            resultsContainer.style.display = 'none';
            resultsContainer.innerHTML = '';
            return;
        }

        const searchUrl = form.getAttribute('data-url').replace('__QUERY__', encodeURIComponent(query));

        fetch(searchUrl)
            .then(response => response.json())
            .then(data => {
                displayResults(data);
            })
            .catch(error => {
                console.error('Erreur:', error);
            });
    }

    // Fonction pour afficher les résultats
    function displayResults(results) {
        resultsContainer.innerHTML = ''; // Réinitialise la liste des résultats
        resultsContainer.style.display = 'block';

        if (results.length === 0) {
            resultsContainer.innerHTML = '<li class="list-group-item">Aucun résultat</li>';
            return;
        }

        results.forEach(movie => {
            const item = document.createElement('li');
            item.className = 'list-group-item';
            item.style.cursor = 'pointer';
            item.textContent = movie.title;

            // Associer l'URL de détails du film
            item.setAttribute('data-url', `/movie/${movie.id}`);

            // Au clic sur un élément : ferme la liste, copie le titre dans le champ, et ouvre la modale
            item.onclick = () => {
                input.value = movie.title; // Copie le titre dans le champ
                resultsContainer.style.display = 'none'; // Ferme la liste

                // Ouvre la modale avec les détails
                openModalWithMovieDetails(item.getAttribute('data-url'));
            };

            // Au survol, changer l’apparence
            item.onmouseover = () => {
                item.classList.add('bg-light');
            };
            item.onmouseout = () => {
                item.classList.remove('bg-light');
            };

            resultsContainer.appendChild(item);
        });
    }

    // Fonction pour ouvrir la modale et charger les détails du film
    function openModalWithMovieDetails(url) {
        const modal = new bootstrap.Modal(document.getElementById('myModal'));

        fetch(url)
            .then(response => response.text())
            .then(data => {
                document.querySelector('#myModal .modal-body').innerHTML = data;
                modal.show();
            })
            .catch(error => {
                console.error('Erreur lors du chargement des détails du film:', error);
                document.querySelector('#myModal .modal-body').innerHTML = '<p>Erreur de chargement des détails.</p>';
            });

        // Vider le champ de recherche lorsque la modale est fermée
        document.getElementById('myModal').addEventListener('hidden.bs.modal', () => {
            input.value = ''; // Vider le champ de recherche
        });
    }

    // Ajoute un écouteur d'événements sur le champ de recherche pour activer le debounce
    input.addEventListener('input', (e) => {
        debounceSearch(e.target.value);
    });

    // Ferme la liste et vide le champ si l'utilisateur clique en dehors de la liste ou du champ
    document.addEventListener('click', (event) => {
        if (!form.contains(event.target) && !resultsContainer.contains(event.target)) {
            resultsContainer.style.display = 'none';
            input.value = '';
        }
    });
    /**
     * rating behaviour
     */
    document.addEventListener('DOMContentLoaded', function() {
        const myModal = document.getElementById('myModal');

        myModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            const url = button.getAttribute('data-url');

            if (url) {
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Erreur de chargement');
                        }
                        return response.text();
                    })
                    .then(data => {
                        myModal.querySelector('.modal-body').innerHTML = data;
                        initializeStarRating(); // Initialise la notation après chargement
                    })
                    .catch(error => {
                        myModal.querySelector('.modal-body').innerHTML = '<p>Erreur de chargement du contenu.</p>';
                        console.error(error);
                    });
            }
        });

        function initializeStarRating() {
            const stars = myModal.querySelectorAll('.star-rating .star');
            const form = myModal.querySelector('.star-rating-form');
            const inputRating = form.querySelector('input[name="rating"]');
            const currentRating = parseInt(inputRating.getAttribute('data-current-rating'), 10) || 0;
            let selectedRating = 0; // Stocke la sélection utilisateur

            // Affiche le score actuel au chargement
            highlightStars(currentRating);

            stars.forEach(star => {
                const rating = parseInt(star.getAttribute('data-value'));

                // Survol pour colorer les étoiles
                star.addEventListener('mouseover', () => {
                    highlightStars(rating);
                });

                // Sortie du survol : restaure la sélection ou le score actuel
                star.addEventListener('mouseout', () => {
                    highlightStars(selectedRating || currentRating);
                });

                // Clic pour sélectionner la note
                star.addEventListener('click', () => {
                    selectedRating = rating; // Stocke la sélection utilisateur
                    inputRating.value = rating; // Met à jour la valeur du champ caché
                    submitRating(form); // Envoie le formulaire en AJAX
                });
            });
        }

        // Fonction pour colorer les étoiles jusqu'à une certaine note
        function highlightStars(rating) {
            const stars = myModal.querySelectorAll('.star-rating .star');
            stars.forEach(star => {
                const starValue = parseInt(star.getAttribute('data-value'));
                if (starValue <= rating) {
                    star.classList.add('text-primary'); // Colore les étoiles actives
                    star.classList.remove('text-muted');
                } else {
                    star.classList.remove('text-primary');
                    star.classList.add('text-muted');
                }
            });
        }

        // Fonction pour soumettre le formulaire en AJAX
        function submitRating(form) {
            const formData = new FormData(form);
            const actionUrl = form.getAttribute('action');

            fetch(actionUrl, {
                method: 'POST',
                body: formData,
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erreur de soumission');
                    }
                    return response.text();
                })
                .then(() => {
                    alert('Votre vote a bien été pris en compte !');
                })
                .catch(error => {
                    alert('Une erreur est survenue. Veuillez réessayer.');
                    console.error(error);
                });
        }
    });
</script>
</body>
</html>
